What is the difference between push, pull, and fetch?

git push - Send changes from a local branch to a remote repo
git fetch - Get changes from a remote repo into your tracking branch
git pull - Get changes from a remote branch into your tracking branch and merge them into a local branch

You may find that git push and git pull have similar definitions. But it’s important to understand that the tasks they perform are actually different.

The purpose of git push is to send changes from a local branch to a remote repository, or repo. It takes your current branch and checks to see if it is connected to a tracking branch for a remote repository. If so, Git shares code with the remote repository by taking your changes from your branch and pushing them to the remote branch. You can think of git push as asking Git to "make the remote branch resemble my local branch."

Under the hood, git pull does two things. It gets changes from a remote branch into your tracking branch and merges them into a local branch. If the remote branch has diverged from your local branch, your request will fail. If not, all the commits in the remote branch are now in your local branch.

If the git pull succeeded, you need to synchronize the local branch with the remote branch by using a combination of git pull or git fetch and git merge.

Using git fetch again takes our current branch and checks to see if there is a tracking branch. If so, it looks for changes in the remote branch and pulls them into the tracking branch. It does not change your local branch.

Beyond the basic push, pull, and fetch commands, you need to know how to change your local branch and merge those changes into your branch. One way to do this is by performing a git merge on the origin, or what Git calls the master, which stands for the “master” branch. A git merge merges those changes into your branch. The actual flow is that git pull simply does a git fetch followed immediately by git merge. However, a second option, and a good practice, is to use git fetch followed by git merge. This helps you understand the changes you are merging into your branch before the merge.
